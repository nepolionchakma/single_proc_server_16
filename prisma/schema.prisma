generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model def_api_endpoint_roles {
  api_endpoint_id   Int
  role_id           Int
  def_api_endpoints def_api_endpoints @relation(fields: [api_endpoint_id], references: [api_endpoint_id], onDelete: NoAction, onUpdate: NoAction)
  def_roles         def_roles         @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([api_endpoint_id, role_id])
}

model def_api_endpoints {
  api_endpoint_id        Int                      @id
  api_endpoint           String?
  parameter1             String?
  parameter2             String?
  method                 String?
  privilege_id           Int?
  def_api_endpoint_roles def_api_endpoint_roles[]

  @@unique([api_endpoint, parameter1, parameter2, method])
}

model def_job_titles {
  job_title_id   Int     @id
  job_title_name String?
}

model def_persons {
  user_id     Int     @id
  first_name  String?
  middle_name String?
  last_name   String?
  job_title   String?
}

model def_privileges {
  privilege_id                Int                           @id
  privilege_name              String?
  def_user_granted_privileges def_user_granted_privileges[]
}

model def_roles {
  role_id                Int                      @id
  role_name              String?
  def_api_endpoint_roles def_api_endpoint_roles[]
  def_user_granted_roles def_user_granted_roles[]
}

model def_tenant_enterprise_setup {
  tenant_id       Int     @id
  enterprise_name String?
  enterprise_type String?
}

model def_tenants {
  tenant_id   Int         @id
  tenant_name String?
  def_users   def_users[]
}

model def_user_credentials {
  user_id  Int     @id
  password String?
}

model def_user_granted_privileges {
  user_id        Int
  privilege_id   Int
  def_privileges def_privileges @relation(fields: [privilege_id], references: [privilege_id], onDelete: NoAction, onUpdate: NoAction)
  def_users      def_users      @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, privilege_id])
}

model def_user_granted_roles {
  user_id   Int
  role_id   Int
  def_roles def_roles @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction)
  def_users def_users @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, role_id])
}

model def_user_types {
  user_type_id   Int     @id
  user_type_name String?
}

model def_users {
  user_id                     Int                           @id
  user_name                   String?
  user_type                   String?
  email_addresses             Json?
  created_by                  Int?
  created_on                  String?
  last_updated_by             Int?
  last_updated_on             String?
  tenant_id                   Int?
  def_user_granted_privileges def_user_granted_privileges[]
  def_user_granted_roles      def_user_granted_roles[]
  def_tenants                 def_tenants?                  @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
}
